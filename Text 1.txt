#define BLYNK_TEMPLATE_ID "TMPL6nKD1ScLU"
#define BLYNK_TEMPLATE_NAME "DIEU KHIEN LED"

#define BLYNK_FIRMWARE_VERSION "0.1.0"

#define BLYNK_PRINT Serial
#define BLYNK_DEBUG
#define USE_NODE_MCU_BOARD
#define APP_DEBUG

#include "BlynkEdgent.h"

WidgetLED LedConnect(V0);
unsigned long timeUpdate = millis();

// Định nghĩa các địa chỉ thanh ghi UART
#define UART0_BASE 0x60000000
#define UART_CLKDIV(uart) (UART0_BASE + 0x14)
#define UART_CONF0(uart) (UART0_BASE + 0x20)
#define UART_STATUS(uart) (UART0_BASE + 0x1C)
#define UART_FIFO(uart) (UART0_BASE + 0x00)

// Kiểm tra nếu các macro đã được định nghĩa
#ifndef WRITE_PERI_REG
#define WRITE_PERI_REG(addr, val) (*(volatile uint32_t *)(addr) = (val))
#endif

#ifndef READ_PERI_REG
#define READ_PERI_REG(addr) (*(volatile uint32_t *)(addr))
#endif

#define UART_TX_EN (1 << 0)
#define UART_RX_EN (1 << 1)
#define UART_BIT_NUM_S 0
#define UART_PARITY_EN (1 << 3)
#define UART_STOP_BIT_NUM_S 4
#define UART_RXFIFO_CNT_S 0
#define UART_TXFIFO_CNT_S 16

void uart_init(unsigned long baud_rate) {
  unsigned int baud_setting = (80000000 / (baud_rate * 16)) - 1; // ESP8266 chạy ở 80MHz
  
  // Thiết lập tốc độ baud
  WRITE_PERI_REG(UART_CLKDIV(UART0_BASE), baud_setting);

  // Thiết lập UART0 (8-bit, no parity, 1 stop bit)
  WRITE_PERI_REG(UART_CONF0(UART0_BASE), (3 << UART_BIT_NUM_S) | (0 << UART_PARITY_EN) | (1 << UART_STOP_BIT_NUM_S));
  
  // Bật bộ truyền và nhận UART
  WRITE_PERI_REG(UART_CONF0(UART0_BASE), READ_PERI_REG(UART_CONF0(UART0_BASE)) | UART_TX_EN | UART_RX_EN);
}

// Hàm kiểm tra xem có dữ liệu nhận được không
bool uart_available() {
  return (READ_PERI_REG(UART_STATUS(UART0_BASE)) & (0xFF << UART_RXFIFO_CNT_S)) > 0;
}

// Hàm đọc một byte dữ liệu từ UART
char uart_read() {
  while (!uart_available());
  return (char)(READ_PERI_REG(UART_FIFO(UART0_BASE)) & 0xFF);
}

// Hàm gửi một byte dữ liệu qua UART
void uart_write(char data) {
  while (READ_PERI_REG(UART_STATUS(UART0_BASE)) & (0xFF << UART_TXFIFO_CNT_S));
  WRITE_PERI_REG(UART_FIFO(UART0_BASE), data);
}

void setup() {
  Serial.begin(9600);  // Khởi tạo UART với tốc độ 9600 baud
  delay(100);
  BlynkEdgent.begin();
  pinMode(D1, OUTPUT);  // LED đỏ
  pinMode(D2, OUTPUT);  // LED xanh lá
}

void loop() {
  BlynkEdgent.run();

  if (uart_available()) {
    char data = uart_read(); // Đọc dữ liệu từ UART

    // Xử lý dữ liệu nhận được
    if (data == 'R') {
      digitalWrite(D2, HIGH); // Bật LED đỏ
      digitalWrite(D1, LOW);  // Tắt LED xanh lá
    } else if (data == 'G') {
      digitalWrite(D2, LOW);  // Tắt LED đỏ
      digitalWrite(D1, HIGH); // Bật LED xanh lá
    } else if (data == 'O') {
      digitalWrite(D1, LOW);  // Tắt LED đỏ
      digitalWrite(D2, LOW);  // Tắt LED xanh lá
    }
  }

  if (millis() - timeUpdate > 1000) {
    if (LedConnect.getValue()) {
      LedConnect.off();
    } else {
      LedConnect.on();
    }
    timeUpdate = millis();
  }
}

BLYNK_CONNECTED() {
  Blynk.syncAll();
}

BLYNK_WRITE(V1) {
  int p = param.asInt();
  digitalWrite(D1, p);
}

BLYNK_WRITE(V2) {
  int p = param.asInt();
  digitalWrite(D2, p);
}
